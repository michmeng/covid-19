{"version":3,"sources":["Covid.js","App.js","reportWebVitals.js","index.js"],"names":["Covid","props","state","error","isLoaded","items","option","countries","data","cases","deaths","recovered","dates","dateData","fetch","then","res","json","result","setState","parseDates","this","Object","keys","timeline","parseCountries","map","item","province","push","country","parseCases","formatted","idx","length","newDate","currDate","name","forEach","element","index","currCountry","parseDeaths","parseRecovered","event","preventDefault","target","value","renderOption","randomColor","Math","floor","random","toString","casesGraph","width","height","margin","top","right","left","bottom","strokeDasharray","dataKey","id","type","stroke","dot","deathsGraph","recoveredGraph","message","className","onChange","e","handleChange","Component","App","reportWebVitals","onPerfEntry","Function","getCLS","getFID","getFCP","getLCP","getTTFB","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.4541030f.chunk.js","sourcesContent":["import React, {Component} from 'react';\nimport './Covid.css';\nimport {\n    LineChart, Line, XAxis, YAxis, CartesianGrid, Tooltip\n  } from 'recharts';\n\nclass Covid extends Component {\n    constructor(props) {\n        super(props);\n        this.state = {\n          error: null,\n          isLoaded: false,\n          items: [],\n          option: 'cases',\n          countries: [],\n          data: [],\n          cases: [],\n          deaths: [],\n          recovered: [],\n          dates: [],\n          dateData: []\n        };\n      }\n    \n      componentDidMount() {\n        fetch(\"https://disease.sh/v3/covid-19/historical?lastdays=250\")\n          .then(res => res.json())\n          .then(\n            (result) => {\n              this.setState({\n                isLoaded: true,\n                items: result\n              }, this.parseDates);\n            },\n            (error) => {\n              this.setState({\n                isLoaded: true,\n                error\n              });\n            }\n          )\n      }\n\n      parseDates() {\n        this.setState({dates: Object.keys(this.state.items[0].timeline.cases)}, this.parseCountries);\n      }\n\n      parseCountries() {\n        var countries = [];\n\n        this.state.items.map((item) => {\n          if (item.province != null) {\n            countries.push(item.country + \": \" + item.province);\n          } else {\n            countries.push(item.country);\n          } \n        });\n\n        this.setState({countries: countries}, this.parseCases);\n      }\n\n      parseCases() {\n        var cases = [];\n        var formatted = [];\n\n        this.state.items.map((item) => {\n          cases.push(item.timeline.cases);\n        });\n\n        for (var idx = 0; idx < this.state.dates.length; idx++) { \n          var newDate = {};\n          var currDate = this.state.dates[idx];\n          newDate.name = this.state.dates[idx];\n          \n          cases.forEach((element, index) => {\n              var currCountry = this.state.countries[index];\n              newDate[currCountry] = element[currDate];\n          });\n\n          formatted.push(newDate);\n        } \n\n        this.setState({cases: formatted}, this.parseDeaths);\n      }\n\n      parseDeaths() {\n        var deaths = [];\n        var formatted = [];\n\n        this.state.items.map((item) => {\n          deaths.push(item.timeline.deaths);\n        });\n\n        for (var idx = 0; idx < this.state.dates.length; idx++) { \n          var newDate = {};\n          var currDate = this.state.dates[idx];\n          newDate.name = this.state.dates[idx];\n          \n          deaths.forEach((element, index) => {\n              var currCountry = this.state.countries[index];\n              newDate[currCountry] = element[currDate];\n          });\n\n          formatted.push(newDate);\n        } \n\n        this.setState({deaths: formatted}, this.parseRecovered);\n      }\n\n      parseRecovered () { \n        var recovered = [];\n        var formatted = [];\n\n        this.state.items.map((item) => {\n          recovered.push(item.timeline.recovered);\n        });\n\n        for (var idx = 0; idx < this.state.dates.length; idx++) { \n          var newDate = {};\n          var currDate = this.state.dates[idx];\n          newDate.name = this.state.dates[idx];\n          \n          recovered.forEach((element, index) => {\n              var currCountry = this.state.countries[index];\n              newDate[currCountry] = element[currDate];\n          });\n\n          formatted.push(newDate);\n        } \n\n        this.setState({recovered: formatted});\n      }\n\n      handleChange(event) {\n        event.preventDefault();\n        this.setState({option: event.target.value}, this.renderOption);\n      }\n\n      randomColor() {\n        var randomColor = Math.floor(Math.random()*16777215).toString(16);\n        return \"#\" + randomColor;\n      }\n\n      render() {\n        let casesGraph = <LineChart\n                            width={1100}\n                            height={600}\n                            data={this.state.cases}\n                            margin={{\n                            top: 5, right: 30, left: 20, bottom: 5,\n                            }}>\n\n                            <CartesianGrid strokeDasharray=\"3 3\" />\n                            <XAxis dataKey=\"name\" />\n                            <YAxis />\n                            <Tooltip />\n                              {   \n                                this.state.countries.map((id) => {\n                                  return (<Line key={id} dataKey={id} type=\"monotone\" stroke={this.randomColor()} dot={false}/>)\n                                })\n                              }\n                          </LineChart>;\n\n          let deathsGraph = <LineChart\n                          width={1000}\n                          height={1000}\n                          data={this.state.deaths}\n                          margin={{\n                          top: 5, right: 30, left: 20, bottom: 5,\n                          }}>\n\n                          <CartesianGrid strokeDasharray=\"3 3\" />\n                          <XAxis dataKey=\"name\" />\n                          <YAxis />\n                          <Tooltip />\n                            {   \n                              this.state.countries.map((id) => {\n                                return (<Line key={id} dataKey={id} type=\"monotone\" stroke={this.randomColor()} dot={false}/>)\n                              })\n                            }\n                          </LineChart>;\n\n                  let recoveredGraph = <LineChart\n                        width={1000}\n                        height={1000}\n                        data={this.state.recovered}\n                        margin={{\n                        top: 5, right: 30, left: 20, bottom: 5,\n                        }}>\n\n                        <CartesianGrid strokeDasharray=\"3 3\" />\n                        <XAxis dataKey=\"name\" />\n                        <YAxis />\n                        <Tooltip />\n                          {   \n                            this.state.countries.map((id) => {\n                              return (<Line key={id} dataKey={id} type=\"monotone\" stroke={this.randomColor()} dot={false}/>)\n                            })\n                          }\n                        </LineChart>;\n\n        const { error, isLoaded} = this.state;\n        if (error) {\n          return <div>Error: {error.message}</div>;\n        } else if (!isLoaded) {\n          return <div>Loading...</div>;\n        } else {\n          return (\n            <div className='parent'>\n                <h1>Covid-19 Statistics</h1>\n                <h2> Pick an option below to view Covid-19 data from the last 250 days</h2>\n                <div className='dropdown'>\n                  Choose an Option:\n                  <select onChange={e => this.handleChange(e)}>\n                      <option value=\"cases\">Cases</option>\n                      <option value=\"deaths\">Deaths</option>\n                      <option value=\"recovered\">Recovered</option>\n                  </select>\n                </div>\n\n                <div className='chart'>\n                  {this.state.option == \"cases\" && casesGraph}\n                  {this.state.option == \"deaths\" && deathsGraph}\n                  {this.state.option == \"recovered\" && recoveredGraph}\n                </div>\n            </div>\n          );\n        }\n      }\n}\n\nexport default Covid;\n","import './App.css';\nimport Covid from './Covid.js';\n\nfunction App() {\n  return (\n    <div>\n        <Covid />\n    </div>\n  );\n}\n\nexport default App;\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}